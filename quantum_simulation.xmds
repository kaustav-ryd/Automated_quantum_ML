<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE simulation [
<!ENTITY Nagg      "3"> <!-- Total number of atoms -->
<!ENTITY Nagg_mone      "2"> <!-- Total number of atoms - 1 (for indexing) -->
<!ENTITY NPATH   "11200">       <!--number of datasets - 10,000 training datasets and 1,200 testing datasets-->
]>
<simulation xmds-version="2">
  <name>twoatoms_Hamil_Lindblad_alphaout_v1</name>

 <!-- This program is simulation of two atoms in the black box and one outside atom.
 For more atoms in the box  -->

<author>Kaustav Mukherjee(2020)</author>
<description>
Static Rydberg atoms of 2 atoms in a box and 1 outside
</description>

<driver name="mpi-multi-path" paths="&NPATH;" /> <!-- parallel processing -->

  <features>
    <benchmark />
    <auto_vectorise />
    <fftw />
    <validation kind="run-time" />
<globals>
        <![CDATA[

        const unsigned long Ntraj = _lattice_p;
        const unsigned long NPATH_mone = _lattice_p - 1;

	//************************************************
	//Parameters
	//***********************************************
        const double hbar=1.05457148e-34; //Units in Joule seconds
	const double hh = hbar*2*M_PI;
	const double Ehartree = 4.35974381e-18;
	const double ta=2.4e-17;
	const double MHz_to_au = 1e6*hh/Ehartree;
	const double automum = 5.29e-11*1e6;
	const double automus = ta/1e-6;
	const double au10kHz = 1.51983e-12;

	//************************************************
	//Rubidium
	//***********************************************

  const double ravg = 8.64;// Manually calculated for the atoms inside box to keep time consistent for arbitrary alpha
  double alpha = 3.0; // Change alpha for different interaction ranges between boxed atoms with output atoms via argument see below "argument" section
  double C3 = 1619.0*MHz_to_au/pow(automum,alpha)/pow(ravg,3.0-alpha);

	//************************************************
	//Leads
	//***********************************************
	const double r = 5.0/automum; //box size
	double d1 = 5.0/automum; //distance of outside atom from the box

	double tmax = 0.1/automus;

  	double Rtheta = 0.0;

  	unsigned long sequence_counter = 0; 

      unsigned long trajectory_counter = 0;

      unsigned long sequence_points = 200; //Change along with sequence number

      unsigned long seq_count = 0;

    long unsigned traj_num = 0;
  double traj_num_adv = 0.0;

  double Nval = 0.0;
        ]]>
     </globals>
     <arguments append_args_to_output_filename="yes">
   <argument name="NNNN" type="integer" default_value="0"/>
   <argument name="AAAA" type="integer" default_value="1"/>
    <![CDATA[

      Nval = pow(10.0,NNNN); //Controls strength of decay operaters
      alpha = AAAA*1.0; // Controls interaction range
      C3 = 1619.0*MHz_to_au/pow(automum,alpha)/pow(ravg,3.0-alpha); //Modified according to alpha
    ]]>
  </arguments>
</features>

 <geometry>
	<propagation_dimension> t </propagation_dimension>
	<transverse_dimensions>
	<dimension name="J" type="integer" lattice="&Nagg;" domain="(0,&Nagg_mone;)" aliases="Jprime"/>
  <dimension name="K" type="integer" lattice="&Nagg;" domain="(0,&Nagg_mone;)" aliases="Kprime"/>
  <dimension name="p" lattice="&NPATH;" domain="(0, NPATH_mone)"/> 
	</transverse_dimensions>
 </geometry>

<!-- Defining density matrix -->
    <vector name="densitymatrix" dimensions="J K" type="complex">
    <components> rho </components>
    <initialisation>
      <![CDATA[

        rho = 0.0;

    if(_index_J==0 && _index_K==0){
       rho = 1.0;
    }

      ]]>
    </initialisation>
  </vector>

<!-- Position of atoms -->
<vector name="main" type="real" dimensions="J">
	<components> posx posy posz</components>
	<initialisation>
    <dependencies> </dependencies>
	 <![CDATA[

	 //********************************************
       // 1st Rydberg-atom -- L atom
       //********************************************
          if (J == 0) {
        posx = 0;
        posy = r/2;
        posz = 0;
             }
      //*********************************************
      // 2nd Rydberg-atom -- Square atom 1
      //**********************************************
        else if (J == 1) {
       //   else {
        posx = 0;
        posy = -r/2;
        posz = 0;
           }
     //***********************************************
     //**********************************************
     //*********************************************
      // 5th Rydberg-atom -- Out
      //**********************************************
          else if (J == 2) {
           posx = (r+d1)*cos(-Rtheta);
             posy = (r+d1)*sin(-Rtheta);
             posz = 0;
          }
     //**********************************************
     //**********************************************
	 ]]>
 </initialisation>
</vector>

<!-- Defining dipolar exchange interactions between atoms to the output atom -->
 <vector name="interaction" type="complex" dimensions="J Jprime">
	<components> Vr r2</components>
	<initialisation>
	<dependencies basis=""> main</dependencies>
	 <![CDATA[

   Vr = 0.0;

		if (J!=Jprime) {
		double x_value = (posx(J=>J)-posx(J=>Jprime));
		double y_value = (posy(J=>J)-posy(J=>Jprime));
		double z_value = (posz(J=>J)-posz(J=>Jprime));
     r2 = sqrt(x_value*x_value+y_value*y_value+z_value*z_value);
     if (abs(r2)>0 && (J==_lattice_J-1||Jprime==_lattice_J-1))
 		{
		Vr = C3/pow(r2,alpha); //Units in Joules
		}}
		else if (J==Jprime) {
		Vr=0;}
	]]>
	</initialisation>
</vector>

<!-- Master Equation for boxed atoms coupling to output atom -->
  <computed_vector name="MasterEqn_rhs_dip"  type="complex" dimensions="J K">
    <components> Wterm </components>
    <evaluation>
      <dependencies  basis="J K Jprime"> densitymatrix interaction </dependencies>
      <![CDATA[
          Wterm = i*(Vr(J=>Jprime,Jprime=>K)*rho(J=>J,K=>Jprime) - Vr(J=>J,Jprime=>Jprime)*rho(J=>Jprime,K=>K));
      ]]>
    </evaluation>
  </computed_vector>

    <vector name="in_dummy" type="real" dimensions="J Jprime">
    <components> dummy </components>
    <initialisation>
      <![CDATA[

      ]]>
    </initialisation>
  </vector>

<!-- Randomised Hamiltonian -->
<vector name="heff" type="complex" dimensions="J K">
  <components>
  Heff 
  </components>
    <initialisation>
      <dependencies>  </dependencies>
   <![CDATA[
      traj_num = trajectory_counter*_size + _rank + 1;

      
      srand( traj_num );

        double Nfac2 = Nval*MHz_to_au; //Controls range of random numbers

        Heff = 0.0;

        Heff(J=>0,K=>0) = ((float)rand()/(float)(RAND_MAX))*Nfac2; //Real diagonal
        Heff(J=>0,K=>1) = ((float)rand()/(float)(RAND_MAX))*Nfac2+((float)rand()/(float)(RAND_MAX))*Nfac2*i; //Complex off-diagonal

        Heff(J=>1,K=>0) = Heff(J=>0,K=>1);
        Heff(J=>1,K=>1) = ((float)rand()/(float)(RAND_MAX))*Nfac2;

        //Add the following matrix elements based on number of atoms to be considered

        //Heff(J=>1,K=>2) = ((float)rand()/(float)(RAND_MAX))*Nfac2+i*((float)rand()/(float)(RAND_MAX))*Nfac2;
        //Heff(J=>1,K=>3) = ((float)rand()/(float)(RAND_MAX))*Nfac2+i*((float)rand()/(float)(RAND_MAX))*Nfac2;
        
        //Heff(J=>2,K=>0) = Heff(J=>0,K=>2);
        //Heff(J=>2,K=>1) = Heff(J=>1,K=>2);
        //Heff(J=>2,K=>2) = ((float)rand()/(float)(RAND_MAX))*Nfac2;
        //Heff(J=>2,K=>3) = ((float)rand()/(float)(RAND_MAX))*Nfac2+i*((float)rand()/(float)(RAND_MAX))*Nfac2;

        //Heff(J=>3,K=>0) = Heff(J=>0,K=>3);
        //Heff(J=>3,K=>1) = Heff(J=>1,K=>3);
        //Heff(J=>3,K=>2) = Heff(J=>2,K=>3);
        //Heff(J=>3,K=>3) = ((float)rand()/(float)(RAND_MAX))*Nfac2;

  ]]>
  </initialisation>
</vector>

<vector name="leff" type="real" dimensions="">
  <components>
  Gamma1 Gamma2 Gamma3 
  </components>
    <initialisation>
      <dependencies>  </dependencies>
   <![CDATA[

         traj_num = trajectory_counter*_size + _rank + 1;

      
      srand( traj_num );

        double Nfac2 = Nval*MHz_to_au;

        Gamma1 = 0.0;
        Gamma2 = 0.0;
        

        Gamma1 = ((float)rand()/(float)(RAND_MAX))*Nfac2;
        Gamma2 = ((float)rand()/(float)(RAND_MAX))*Nfac2;

        //Add more decay rates based on number of atoms

        //Gamma3 = 0.0;
        //Gamma3 = ((float)rand()/(float)(RAND_MAX))*Nfac2;

  ]]>
  </initialisation>
</vector>

    <computed_vector name="MasterEqn_rhs" dimensions="J K" type="complex">
    <components>
    Eqnrhs2
    </components>
  <evaluation>
      <dependencies basis="J K Jprime"> heff densitymatrix in_dummy </dependencies>
      <![CDATA[
      Eqnrhs2 = 0.0;

      Eqnrhs2(J=>J,K=>K) = -i*(Heff(J=>J,K=>Jprime)*rho(J=>Jprime,K=>K)-rho(J=>J,K=>Jprime)*Heff(J=>Jprime,K=>K));

      ]]>
    </evaluation>
  </computed_vector>

  <computed_vector name="MasterEqn_rhs_leff" dimensions="J K" type="complex">
    <components>
    Dephas
    </components>
  <evaluation>
      <dependencies basis="J K "> leff densitymatrix </dependencies>
      <![CDATA[
      Dephas = 0.0;

      Dephas(J=>0,K=>0)=0.;
      Dephas(J=>0,K=>1)=-0.5*rho(J=>0,K=>1)*(abs(Gamma1) + abs(Gamma2));
 
      Dephas(J=>1,K=>0)=-0.5*rho(J=>1,K=>0)*(abs(Gamma1) + abs(Gamma2));
      Dephas(J=>1,K=>1)=0.;

      //Add the following based on number of atoms to be considered

      //Dephas(J=>0,K=>2)=-0.5*rho(J=>0,K=>2)*(abs(Gamma1) + abs(Gamma3));
      //Dephas(J=>0,K=>3)=-0.5*rho(J=>0,K=>3)*abs(Gamma1);
      //Dephas(J=>1,K=>2)=-0.5*rho(J=>1,K=>2)*(abs(Gamma2) + abs(Gamma3));
      //Dephas(J=>1,K=>3)=-0.5*rho(J=>1,K=>3)*abs(Gamma2);
      //Dephas(J=>2,K=>0)=-0.5*rho(J=>2,K=>0)*(abs(Gamma1) + abs(Gamma3));
      //Dephas(J=>2,K=>1)=-0.5*rho(J=>2,K=>1)*(abs(Gamma2) + abs(Gamma3));
      //Dephas(J=>2,K=>2)=0.;
      //Dephas(J=>2,K=>3)=-0.5*rho(J=>2,K=>3)*abs(Gamma3);
      //Dephas(J=>3,K=>0)=-0.5*rho(J=>3,K=>0)*abs(Gamma1);
      //Dephas(J=>3,K=>1)=-0.5*rho(J=>3,K=>1)*abs(Gamma2);
      //Dephas(J=>3,K=>2)=-0.5*rho(J=>3,K=>2)*abs(Gamma3);
      //Dephas(J=>3,K=>3)=0.;

      ]]>
    </evaluation>
  </computed_vector>


    <computed_vector name="populations"  type="real" dimensions="J">
    <components> pops </components>
    <evaluation>
        <dependencies> densitymatrix </dependencies>
        <![CDATA[
          pops = 0.0;
          if(_index_J==_index_K){
           pops = rho.Re();
          }
        ]]>
    </evaluation>
  </computed_vector>

 <sequence>
  <sequence cycles="200">
    <filter>
    <dependencies basis="J K"> densitymatrix </dependencies>
     <![CDATA[

        seq_count = sequence_counter - trajectory_counter*sequence_points;

        Rtheta = -3*M_PI/4 + (seq_count/10)*1.0/200.0*(3*M_PI/2) ; //value of Rtheta goes from 0 to 200 which controls the position of outside atom where the measurement will be made

        d1 = r;

        _J_main_initialise();
        _JJprime_interaction_initialise();

        //re-initialize 
        rho = 0.0;

        if(_index_J==0 && _index_K==0){
           rho = 1.0;
        } 

      ]]>
    </filter>

    <integrate algorithm="ARK89" interval="tmax" steps="20000" tolerance="1.0e-8">
      <samples>1 0 0</samples>

      <operators>
        <integration_vectors> densitymatrix </integration_vectors>
	<dependencies>MasterEqn_rhs_dip MasterEqn_rhs MasterEqn_rhs_leff</dependencies>
        <![CDATA[
        drho_dt = Wterm + Eqnrhs2 + Dephas; // Numerical simulation using Lindblad Master equation
        ]]>
      </operators>
    </integrate>
      <filter>
    <dependencies basis=""> </dependencies>
     <![CDATA[
        sequence_counter ++; //we are done with one set, increment counter
        //if(sequence_counter<20){
          //printf("Ntraj counter %i, seq counter %i, Rtheta %.2f, d1 %.2f \n",traj_num,sequence_counter,Rtheta,d1*automum);
        //}
    ]]>
  </filter>
   </sequence>
     <filter>
    <dependencies basis=""> </dependencies>
     <![CDATA[
        trajectory_counter ++; //local count, currrently doesn't work with adapative scheduler
    ]]>
  </filter>
  </sequence>

<!-- Sampling output -->
  <output>
    <sampling_group basis="p J(0)" initial_sample="no">
      <moments>pop1</moments>
      <dependencies>populations</dependencies>
      <![CDATA[
        pop1 = 0.0;

        if(_index_p == traj_num -1){
	       pop1 = Ntraj*pops(J=>(_lattice_J - 1))/_lattice_J;
        }
      ]]>
    </sampling_group>
    <sampling_group basis="p J K" initial_sample="yes">
      <moments> Heff_re Heff_im </moments>
      <dependencies> heff</dependencies>
      <![CDATA[
      if(_index_p == traj_num -1){
          Heff_re = Ntraj*Heff.Re()/MHz_to_au;
          Heff_im = Ntraj*Heff.Im()/MHz_to_au;
          }
      ]]>
    </sampling_group>
        <sampling_group basis="p " initial_sample="yes">
      <moments> gam1 gam2 gam3 </moments>
      <dependencies> leff</dependencies>
      <![CDATA[
      if(_index_p == traj_num -1){
          gam1 = Ntraj*Gamma1/MHz_to_au;
          gam2 = Ntraj*Gamma2/MHz_to_au;
          gam3 = Ntraj*Gamma3/MHz_to_au;
          }
      ]]>
    </sampling_group>
  </output>
</simulation>





